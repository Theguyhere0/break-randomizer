{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Layout from '../../components/Layout';\nimport { Grid, Dropdown, Input, Button, Message } from 'semantic-ui-react';\nvar actSetList = [{\n  key: 'Activity Set 1',\n  text: 'Activity Set 1'\n}, {\n  key: 'Activity Set 2',\n  text: 'Activity Set 2'\n}];\n\nvar CreateList = /*#__PURE__*/function (_Component) {\n  _inherits(CreateList, _Component);\n\n  var _super = _createSuper(CreateList);\n\n  function CreateList() {\n    var _this;\n\n    _classCallCheck(this, CreateList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      actList: '',\n      title: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleAddition\", function (e, _ref) {\n      var value = _ref.value;\n      return actSetList.push({\n        key: value,\n        text: value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (e, _ref2) {\n      var value = _ref2.value;\n      return _this.setState({\n        actList: value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleInputChange\", function (e, _ref3) {\n      var value = _ref3.value;\n      return _this.setState({\n        title: value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEdit\", function () {\n      return console.log(_this.state.title);\n    });\n\n    return _this;\n  }\n\n  _createClass(CreateList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(Layout, null, __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, {\n        width: 8\n      }, __jsx(\"h2\", {\n        style: {\n          textAlign: 'right'\n        }\n      }, \"Saved Activity Sets\")), __jsx(Grid.Column, {\n        width: 5\n      }, __jsx(Dropdown, {\n        placeholder: \"Activity Set\",\n        search: true,\n        selection: true,\n        options: actSetList,\n        allowAdditions: true,\n        additionLabel: \"New Activity Set: \",\n        onAddItem: this.handleAddition,\n        onChange: this.handleChange\n      }))), __jsx(Grid.Row, null, __jsx(Grid.Column, {\n        textAlign: \"center\"\n      }, __jsx(Input, {\n        action: {\n          color: 'blue',\n          content: 'Edit Title',\n          onClick: function onClick() {\n            return _this2.handleEdit();\n          }\n        },\n        size: \"large\",\n        placeholder: \"Title\",\n        defaultValue: this.state.actList,\n        onChange: this.handleInputChange\n      })))));\n    }\n  }]);\n\n  return CreateList;\n}(Component);\n\nexport { CreateList as default };","map":{"version":3,"sources":["C:/Users/mxlin/Documents/GitHub/break-randomizer/pages/edit/index.js"],"names":["React","Component","Layout","Grid","Dropdown","Input","Button","Message","actSetList","key","text","CreateList","actList","title","e","value","push","setState","console","log","state","textAlign","handleAddition","handleChange","color","content","onClick","handleEdit","handleInputChange"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAAQC,IAAR,EAAcC,QAAd,EAAwBC,KAAxB,EAA+BC,MAA/B,EAAuCC,OAAvC,QAAqD,mBAArD;AAEA,IAAIC,UAAU,GAAG,CACf;AACEC,EAAAA,GAAG,EAAE,gBADP;AAEEC,EAAAA,IAAI,EAAE;AAFR,CADe,EAKf;AACED,EAAAA,GAAG,EAAE,gBADP;AAEEC,EAAAA,IAAI,EAAE;AAFR,CALe,CAAjB;;IAWqBC,U;;;;;;;;;;;;;;;;4DACb;AACJC,MAAAA,OAAO,EAAE,EADL;AAEJC,MAAAA,KAAK,EAAE;AAFH,K;;qEAMW,UAACC,CAAD;AAAA,UAAKC,KAAL,QAAKA,KAAL;AAAA,aAAgBP,UAAU,CAACQ,IAAX,CAAgB;AAACP,QAAAA,GAAG,EAAEM,KAAN;AAAaL,QAAAA,IAAI,EAAEK;AAAnB,OAAhB,CAAhB;AAAA,K;;mEAGF,UAACD,CAAD;AAAA,UAAKC,KAAL,SAAKA,KAAL;AAAA,aAAgB,MAAKE,QAAL,CAAc;AAACL,QAAAA,OAAO,EAAEG;AAAV,OAAd,CAAhB;AAAA,K;;wEAGK,UAACD,CAAD;AAAA,UAAKC,KAAL,SAAKA,KAAL;AAAA,aAAgB,MAAKE,QAAL,CAAc;AAACJ,QAAAA,KAAK,EAAEE;AAAR,OAAd,CAAhB;AAAA,K;;iEAGP;AAAA,aAAMG,OAAO,CAACC,GAAR,CAAY,MAAKC,KAAL,CAAWP,KAAvB,CAAN;AAAA,K;;;;;;;6BAEJ;AAAA;;AACP,aACE,MAAC,MAAD,QACE,MAAC,IAAD,QACE,MAAC,IAAD,CAAM,GAAN,QACE,MAAC,IAAD,CAAM,MAAN;AAAa,QAAA,KAAK,EAAE;AAApB,SACE;AAAI,QAAA,KAAK,EAAE;AAACQ,UAAAA,SAAS,EAAE;AAAZ;AAAX,+BADF,CADF,EAIE,MAAC,IAAD,CAAM,MAAN;AAAa,QAAA,KAAK,EAAE;AAApB,SACE,MAAC,QAAD;AACE,QAAA,WAAW,EAAC,cADd;AAEE,QAAA,MAAM,MAFR;AAGE,QAAA,SAAS,MAHX;AAIE,QAAA,OAAO,EAAEb,UAJX;AAKE,QAAA,cAAc,MALhB;AAME,QAAA,aAAa,EAAC,oBANhB;AAOE,QAAA,SAAS,EAAE,KAAKc,cAPlB;AAQE,QAAA,QAAQ,EAAE,KAAKC;AARjB,QADF,CAJF,CADF,EAkBE,MAAC,IAAD,CAAM,GAAN,QACE,MAAC,IAAD,CAAM,MAAN;AAAa,QAAA,SAAS,EAAC;AAAvB,SACE,MAAC,KAAD;AACE,QAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAE,MADD;AAENC,UAAAA,OAAO,EAAE,YAFH;AAGNC,UAAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACC,UAAL,EAAN;AAAA;AAHH,SADV;AAME,QAAA,IAAI,EAAC,OANP;AAOE,QAAA,WAAW,EAAC,OAPd;AAQE,QAAA,YAAY,EAAE,KAAKP,KAAL,CAAWR,OAR3B;AASE,QAAA,QAAQ,EAAE,KAAKgB;AATjB,QADF,CADF,CAlBF,CADF,CADF;AAsCD;;;;EAzDqC3B,S;;SAAnBU,U","sourcesContent":["import React, {Component} from 'react';\r\nimport Layout from '../../components/Layout';\r\nimport {Grid, Dropdown, Input, Button, Message} from 'semantic-ui-react';\r\n\r\nlet actSetList = [\r\n  {\r\n    key: 'Activity Set 1',\r\n    text: 'Activity Set 1',\r\n  },\r\n  {\r\n    key: 'Activity Set 2',\r\n    text: 'Activity Set 2',\r\n  }\r\n];\r\n\r\nexport default class CreateList extends Component {\r\n  state={\r\n    actList: '',\r\n    title: ''\r\n  };\r\n\r\n// Adds activity list into data\r\n  handleAddition = (e, {value}) => actSetList.push({key: value, text: value});\r\n\r\n// Changes title display to match current value\r\n  handleChange = (e, {value}) => this.setState({actList: value});\r\n\r\n// Keeps track of title for future use\r\n  handleInputChange = (e, {value}) => this.setState({title: value});\r\n\r\n// Edits the title of the active activity list\r\n  handleEdit = () => console.log(this.state.title);\r\n\r\n  render() {\r\n    return(\r\n      <Layout>\r\n        <Grid>\r\n          <Grid.Row>\r\n            <Grid.Column width={8}>\r\n              <h2 style={{textAlign: 'right'}}>Saved Activity Sets</h2>\r\n            </Grid.Column>\r\n            <Grid.Column width={5}>\r\n              <Dropdown\r\n                placeholder='Activity Set'\r\n                search\r\n                selection\r\n                options={actSetList}\r\n                allowAdditions\r\n                additionLabel='New Activity Set: '\r\n                onAddItem={this.handleAddition}\r\n                onChange={this.handleChange}\r\n              />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n          <Grid.Row>\r\n            <Grid.Column textAlign='center'>\r\n              <Input\r\n                action={{\r\n                  color: 'blue',\r\n                  content: 'Edit Title',\r\n                  onClick: () => this.handleEdit()\r\n                }}\r\n                size='large'\r\n                placeholder='Title'\r\n                defaultValue={this.state.actList}\r\n                onChange={this.handleInputChange}\r\n              />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}