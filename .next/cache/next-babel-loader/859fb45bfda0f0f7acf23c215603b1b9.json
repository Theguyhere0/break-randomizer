{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Layout from '../../components/Layout';\nimport { Grid, Dropdown, Input, Button, Message } from 'semantic-ui-react';\nlet actSetList = [{\n  key: 'Activity Set 1',\n  text: 'Activity Set 1',\n  value: 'Activity Set 1',\n  activities: [{\n    name: 'Reading',\n    weight: 2\n  }, {\n    name: 'Writing',\n    weight: 5\n  }]\n}, {\n  key: 'Activity Set 2',\n  text: 'Activity Set 2',\n  value: 'Activity Set 2',\n  activities: [{\n    name: 'Running',\n    weight: 3\n  }, {\n    name: 'Biking',\n    weight: 1\n  }]\n}];\nexport default class CreateList extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      actList: '',\n      title: '',\n      tempName: ''\n    });\n\n    _defineProperty(this, \"handleAddition\", (e, {\n      value\n    }) => actSetList.push({\n      key: value,\n      text: value,\n      value\n    }));\n\n    _defineProperty(this, \"handleChange\", (e, {\n      value\n    }) => this.setState({\n      actList: value,\n      title: value\n    }));\n\n    _defineProperty(this, \"handleInputChange\", (e, {\n      value\n    }) => this.setState({\n      actList: value\n    }));\n\n    _defineProperty(this, \"handleDelete\", () => {\n      const index = actSetList.map(function (e) {\n        return e.key;\n      }).indexOf(this.state.title);\n      actSetList.splice(index, 1);\n      this.setState({\n        actList: '',\n        title: ''\n      });\n    });\n\n    _defineProperty(this, \"handleEdit\", () => {\n      const index = actSetList.map(function (e) {\n        return e.key;\n      }).indexOf(this.state.title);\n\n      if (this.state.title) {\n        actSetList[index].key = this.state.actList;\n        actSetList[index].text = this.state.actList;\n        actSetList[index].value = this.state.actList;\n        this.setState({\n          title: this.state.actList\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleAdd\", () => {});\n\n    _defineProperty(this, \"handleRemove\", () => {});\n\n    _defineProperty(this, \"handleModify\", () => {});\n\n    _defineProperty(this, \"handleIncrement\", () => {});\n\n    _defineProperty(this, \"handleDecrement\", () => {});\n  }\n\n  renderActivities() {\n    const index = actSetList.map(function (e) {\n      return e.key;\n    }).indexOf(this.state.title);\n    actSetList[index].activities.forEach(activity => {\n      return __jsx(Grid.Row, null, __jsx(Grid.Column, {\n        width: 2,\n        textAlign: \"right\",\n        verticalAlign: \"middle\"\n      }, __jsx(Button, {\n        circular: true,\n        negative: true,\n        icon: \"minus\",\n        size: \"medium\",\n        onClick: this.handleRemove\n      })), __jsx(Grid.Column, {\n        width: 9\n      }, __jsx(Input, {\n        action: {\n          color: 'blue',\n          content: 'Edit Name',\n          onClick: this.handleModify\n        },\n        size: \"small\",\n        fluid: true,\n        defaultValue: activity.name\n      })), __jsx(Grid.Column, {\n        width: 1\n      }, __jsx(Button, {\n        circular: true,\n        negative: true,\n        icon: \"minus\",\n        size: \"mini\",\n        onClick: this.handleDecrement\n      })), __jsx(Grid.Column, {\n        width: 3\n      }, __jsx(\"h3\", null, activity.weight)), __jsx(Grid.Column, {\n        width: 1\n      }, __jsx(Button, {\n        circular: true,\n        positive: true,\n        icon: \"plus\",\n        size: \"mini\",\n        onClick: this.handleIncrement\n      })));\n    });\n  }\n\n  render() {\n    return __jsx(Layout, null, __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, {\n      width: 8\n    }, __jsx(\"h2\", {\n      style: {\n        textAlign: 'right'\n      }\n    }, \"Saved Activity Sets\")), __jsx(Grid.Column, {\n      width: 5\n    }, __jsx(Dropdown, {\n      placeholder: \"Activity Set\",\n      search: true,\n      selection: true,\n      options: actSetList,\n      allowAdditions: true,\n      additionLabel: \"New Activity Set: \",\n      onAddItem: this.handleAddition,\n      onChange: this.handleChange,\n      value: this.state.title\n    }))), __jsx(Grid.Row, null, __jsx(Grid.Column, {\n      textAlign: \"center\"\n    }, __jsx(Input, {\n      size: \"large\",\n      placeholder: \"Title\",\n      value: this.state.actList,\n      onChange: this.handleInputChange\n    }, __jsx(Button, {\n      negative: true,\n      icon: \"minus\",\n      size: \"large\",\n      onClick: this.handleDelete\n    }), __jsx(\"input\", null), __jsx(Button, {\n      color: \"blue\",\n      content: \"Edit Title\",\n      onClick: this.handleEdit\n    })))), __jsx(Grid.Row, null, __jsx(Grid.Column, {\n      width: 2\n    }), __jsx(Grid.Column, {\n      width: 9,\n      textAlign: \"center\",\n      verticalAlign: \"bottom\"\n    }, __jsx(Message, {\n      color: \"blue\",\n      header: \"Activity Name\",\n      content: \"Name of your break activity.\"\n    })), __jsx(Grid.Column, {\n      width: 5,\n      textAlign: \"center\"\n    }, __jsx(Message, {\n      color: \"red\",\n      header: \"Weight\",\n      content: \"How much you want to weight an activity to show up. Each unit is like adding another entry into a lottery.\"\n    }))), __jsx(Grid.Row, null, __jsx(Grid.Column, {\n      width: 2,\n      textAlign: \"right\",\n      verticalAlign: \"middle\"\n    }, __jsx(Button, {\n      circular: true,\n      positive: true,\n      icon: \"plus\",\n      size: \"medium\",\n      onClick: this.handleAdd\n    })), __jsx(Grid.Column, {\n      width: 9\n    }, __jsx(Input, {\n      size: \"small\",\n      placeholder: \"Name\",\n      fluid: true\n    })))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/mxlin/Documents/GitHub/break-randomizer/pages/edit/index.js"],"names":["React","Component","Layout","Grid","Dropdown","Input","Button","Message","actSetList","key","text","value","activities","name","weight","CreateList","actList","title","tempName","e","push","setState","index","map","indexOf","state","splice","renderActivities","forEach","activity","handleRemove","color","content","onClick","handleModify","handleDecrement","handleIncrement","render","textAlign","handleAddition","handleChange","handleInputChange","handleDelete","handleEdit","handleAdd"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Layout from '../../components/Layout';\r\nimport {Grid, Dropdown, Input, Button, Message} from 'semantic-ui-react';\r\n\r\nlet actSetList = [\r\n  {\r\n    key: 'Activity Set 1',\r\n    text: 'Activity Set 1',\r\n    value: 'Activity Set 1',\r\n    activities: [\r\n      {\r\n        name: 'Reading',\r\n        weight: 2\r\n      },\r\n      {\r\n        name: 'Writing',\r\n        weight: 5\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    key: 'Activity Set 2',\r\n    text: 'Activity Set 2',\r\n    value: 'Activity Set 2',\r\n    activities: [\r\n      {\r\n        name: 'Running',\r\n        weight: 3\r\n      },\r\n      {\r\n        name: 'Biking',\r\n        weight: 1\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default class CreateList extends Component {\r\n  state={\r\n    actList: '',\r\n    title: '',\r\n    tempName: ''\r\n  };\r\n\r\n// Adds activity list into data\r\n  handleAddition = (e, {value}) => actSetList.push({key: value, text: value, value});\r\n\r\n// Changes title display to match current value and keeps track of true title\r\n  handleChange = (e, {value}) => this.setState({actList: value, title: value});\r\n\r\n// Allows changes in input field\r\n  handleInputChange = (e, {value}) => this.setState({actList: value});\r\n\r\n// Deletes the activity list\r\n  handleDelete = () => {\r\n    const index = actSetList.map(function(e) {\r\n      return e.key;\r\n    }).indexOf(this.state.title);\r\n    actSetList.splice(index, 1);\r\n    this.setState({actList: '', title: ''})\r\n  };\r\n\r\n// Edits the title of the active activity list\r\n  handleEdit = () => {\r\n    const index = actSetList.map(function(e) {\r\n      return e.key;\r\n    }).indexOf(this.state.title);\r\n    if (this.state.title) {\r\n      actSetList[index].key = this.state.actList;\r\n      actSetList[index].text = this.state.actList;\r\n      actSetList[index].value = this.state.actList;\r\n      this.setState({title: this.state.actList});\r\n    }\r\n  };\r\n\r\n// Adds an activity to the activity list\r\n  handleAdd = () => {\r\n\r\n  };\r\n\r\n// Removes an activity from the activity list\r\n  handleRemove = () => {\r\n\r\n  };\r\n\r\n// Modifies the name of an activity\r\n  handleModify = () => {\r\n\r\n  };\r\n\r\n// Increments the weight of an activity\r\n  handleIncrement = () => {\r\n\r\n  }\r\n\r\n// Decrements the weight of an activity\r\n  handleDecrement = () => {\r\n\r\n  };\r\n\r\n  renderActivities() {\r\n    const index = actSetList.map(function(e) {\r\n      return e.key;\r\n    }).indexOf(this.state.title);\r\n    actSetList[index].activities.forEach(activity => {\r\n      return(\r\n        <Grid.Row>\r\n          <Grid.Column\r\n            width={2}\r\n            textAlign='right'\r\n            verticalAlign='middle'\r\n          >\r\n            <Button\r\n              circular\r\n              negative\r\n              icon='minus'\r\n              size='medium'\r\n              onClick={this.handleRemove}\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column width={9}>\r\n            <Input\r\n              action={{\r\n                color: 'blue',\r\n                content: 'Edit Name',\r\n                onClick: this.handleModify\r\n              }}\r\n              size='small'\r\n              fluid\r\n              defaultValue={activity.name}\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column width={1}>\r\n            <Button\r\n              circular\r\n              negative\r\n              icon='minus'\r\n              size='mini'\r\n              onClick={this.handleDecrement}\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column width={3}>\r\n            <h3>{activity.weight}</h3>\r\n          </Grid.Column>\r\n          <Grid.Column width={1}>\r\n            <Button\r\n              circular\r\n              positive\r\n              icon='plus'\r\n              size='mini'\r\n              onClick={this.handleIncrement}\r\n            />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <Layout>\r\n        <Grid>\r\n          <Grid.Row>\r\n            <Grid.Column width={8}>\r\n              <h2 style={{textAlign: 'right'}}>Saved Activity Sets</h2>\r\n            </Grid.Column>\r\n            <Grid.Column width={5}>\r\n              <Dropdown\r\n                placeholder='Activity Set'\r\n                search\r\n                selection\r\n                options={actSetList}\r\n                allowAdditions\r\n                additionLabel='New Activity Set: '\r\n                onAddItem={this.handleAddition}\r\n                onChange={this.handleChange}\r\n                value={this.state.title}\r\n              />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n          <Grid.Row>\r\n            <Grid.Column textAlign='center'>\r\n              <Input\r\n                size='large'\r\n                placeholder='Title'\r\n                value={this.state.actList}\r\n                onChange={this.handleInputChange}\r\n              >\r\n                <Button\r\n                  negative\r\n                  icon='minus'\r\n                  size='large'\r\n                  onClick={this.handleDelete}\r\n                />\r\n                <input />\r\n                <Button\r\n                  color='blue'\r\n                  content='Edit Title'\r\n                  onClick={this.handleEdit}\r\n                />\r\n              </Input>\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n          <Grid.Row>\r\n            <Grid.Column width={2}></Grid.Column>\r\n            <Grid.Column\r\n              width={9}\r\n              textAlign='center'\r\n              verticalAlign='bottom'\r\n            >\r\n              <Message\r\n                color='blue'\r\n                header='Activity Name'\r\n                content='Name of your break activity.'\r\n              />\r\n            </Grid.Column>\r\n            <Grid.Column\r\n              width={5}\r\n              textAlign='center'\r\n            >\r\n              <Message\r\n                color='red'\r\n                header='Weight'\r\n                content='How much you want to weight an activity to show up. Each unit is like adding another entry into a lottery.'\r\n              />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n          <Grid.Row>\r\n            <Grid.Column\r\n              width={2}\r\n              textAlign='right'\r\n              verticalAlign='middle'\r\n            >\r\n              <Button\r\n                circular\r\n                positive\r\n                icon='plus'\r\n                size='medium'\r\n                onClick={this.handleAdd}\r\n              />\r\n            </Grid.Column>\r\n            <Grid.Column width={9}>\r\n              <Input\r\n                size='small'\r\n                placeholder='Name'\r\n                fluid\r\n              />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}