{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Layout from '../../components/Layout';\nimport { Grid, Dropdown, Input, Button, Message, Popup } from 'semantic-ui-react';\nvar actSetList = [];\n\nvar CreateList = /*#__PURE__*/function (_Component) {\n  _inherits(CreateList, _Component);\n\n  var _super = _createSuper(CreateList);\n\n  function CreateList() {\n    var _this;\n\n    _classCallCheck(this, CreateList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      actList: '',\n      title: '',\n      tempName: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getOptions\", function () {\n      for (var i in window.localStorage) {\n        if (window.localStorage[i]) {\n          actSetList.push(JSON.parse(window.localStorage[i]));\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleAddition\", function (e, _ref) {\n      var value = _ref.value;\n      window.localStorage.setItem(value, JSON.stringify({\n        key: value,\n        text: value,\n        value: value,\n        activities: []\n      }));\n      _this.getOptions;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (e, _ref2) {\n      var value = _ref2.value;\n      return _this.setState({\n        actList: value,\n        title: value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleInputChange\", function (e, _ref3) {\n      var value = _ref3.value;\n      return _this.setState({\n        actList: value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDelete\", function () {\n      window.localStorage.removeItem(_this.state.title);\n\n      _this.setState({\n        actList: '',\n        title: ''\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleAntidelete\", function () {\n      if (_this.state.actList) {\n        return __jsx(Button, {\n          negative: true,\n          content: \"Comfirm Delete\",\n          onClick: _this.handleDelete\n        });\n      } else {\n        return __jsx(Message, {\n          negative: true,\n          content: \"You cannot delete nothing!\"\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEdit\", function () {\n      if (_this.state.title) {\n        var activities = JSON.parse(window.localStorage.getItem(_this.state.title)).acactivities;\n        window.localStorage.removeItem(_this.state.title);\n        window.localStorage.setItem(value, JSON.stringify({\n          key: _this.state.actList,\n          text: _this.state.actList,\n          value: _this.state.actList,\n          activities: activities\n        }));\n\n        _this.setState({\n          title: _this.state.actList\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleAdd\", function () {});\n\n    _defineProperty(_assertThisInitialized(_this), \"handleRemove\", function () {});\n\n    _defineProperty(_assertThisInitialized(_this), \"handleModify\", function () {});\n\n    _defineProperty(_assertThisInitialized(_this), \"handleIncrement\", function () {});\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDecrement\", function () {});\n\n    return _this;\n  }\n\n  _createClass(CreateList, [{\n    key: \"renderActivities\",\n    value: function renderActivities() {\n      var _this2 = this;\n\n      if (this.state.title) {\n        return JSON.parse(window.localStorage.getItem(this.state.title)).activities.map(function (activity) {\n          return __jsx(Grid.Row, {\n            key: activity.key\n          }, __jsx(Grid.Column, {\n            width: 2,\n            textAlign: \"right\",\n            verticalAlign: \"middle\"\n          }, __jsx(Button, {\n            circular: true,\n            negative: true,\n            icon: \"minus\",\n            size: \"medium\",\n            onClick: _this2.handleRemove\n          })), __jsx(Grid.Column, {\n            width: 9\n          }, __jsx(Input, {\n            action: {\n              color: 'blue',\n              content: 'Edit Name',\n              onClick: _this2.handleModify\n            },\n            size: \"small\",\n            fluid: true,\n            defaultValue: activity.key\n          })), __jsx(Grid.Column, {\n            width: 2,\n            textAlign: \"right\",\n            verticalAlign: \"middle\"\n          }, __jsx(Button, {\n            circular: true,\n            negative: true,\n            icon: \"minus\",\n            size: \"mini\",\n            onClick: _this2.handleDecrement\n          })), __jsx(Grid.Column, {\n            width: 1,\n            textAlign: \"center\",\n            verticalAlign: \"middle\"\n          }, __jsx(\"h2\", null, activity.weight)), __jsx(Grid.Column, {\n            width: 2,\n            verticalAlign: \"middle\"\n          }, __jsx(Button, {\n            circular: true,\n            positive: true,\n            icon: \"plus\",\n            size: \"mini\",\n            onClick: _this2.handleIncrement\n          })));\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.getOptions;\n      return __jsx(Layout, null, __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, {\n        width: 8\n      }, __jsx(\"h2\", {\n        style: {\n          textAlign: 'right'\n        }\n      }, \"Saved Activity Sets\")), __jsx(Grid.Column, {\n        width: 5\n      }, __jsx(Dropdown, {\n        placeholder: \"Activity Set\",\n        search: true,\n        selection: true,\n        options: actSetList,\n        allowAdditions: true,\n        additionLabel: \"New Activity Set: \",\n        onAddItem: this.handleAddition,\n        onChange: this.handleChange,\n        value: this.state.title\n      }))), __jsx(Grid.Row, null, __jsx(Grid.Column, {\n        textAlign: \"center\"\n      }, __jsx(Popup, {\n        trigger: __jsx(Input, {\n          size: \"large\",\n          placeholder: \"Title\",\n          value: this.state.actList,\n          onChange: this.handleInputChange,\n          action: true\n        }, __jsx(Popup, {\n          trigger: __jsx(Button, {\n            negative: true,\n            icon: \"minus\",\n            size: \"large\"\n          }),\n          content: this.handleAntidelete,\n          on: \"click\",\n          position: \"top center\"\n        }), __jsx(\"input\", null), __jsx(Button, {\n          color: \"blue\",\n          content: \"Edit Title\",\n          onClick: this.handleEdit,\n          disabled: !this.state.actList\n        })),\n        content: __jsx(Message, {\n          negative: true,\n          content: \"You cannot name an activity set nothing!\"\n        }),\n        position: \"top center\",\n        disabled: !!this.state.actList\n      }))), __jsx(Grid.Row, null, __jsx(Grid.Column, {\n        width: 2\n      }), __jsx(Grid.Column, {\n        width: 9,\n        textAlign: \"center\",\n        verticalAlign: \"bottom\"\n      }, __jsx(Message, {\n        color: \"blue\",\n        header: \"Activity Name\",\n        content: \"Name of your break activity.\"\n      })), __jsx(Grid.Column, {\n        width: 5,\n        textAlign: \"center\"\n      }, __jsx(Message, {\n        color: \"red\",\n        header: \"Weight\",\n        content: \"How much you want to weight an activity to show up. Each unit is like adding another entry into a lottery.\"\n      }))), this.renderActivities(), __jsx(Grid.Row, null, __jsx(Grid.Column, {\n        width: 2,\n        textAlign: \"right\",\n        verticalAlign: \"middle\"\n      }, __jsx(Button, {\n        circular: true,\n        positive: true,\n        icon: \"plus\",\n        size: \"medium\",\n        onClick: this.handleAdd\n      })), __jsx(Grid.Column, {\n        width: 9\n      }, __jsx(Input, {\n        size: \"small\",\n        placeholder: \"Name\",\n        fluid: true\n      })))));\n    }\n  }]);\n\n  return CreateList;\n}(Component);\n\nexport { CreateList as default };","map":{"version":3,"sources":["C:/Users/mxlin/Documents/GitHub/break-randomizer/pages/edit/index.js"],"names":["React","Component","Layout","Grid","Dropdown","Input","Button","Message","Popup","actSetList","CreateList","actList","title","tempName","i","window","localStorage","push","JSON","parse","e","value","setItem","stringify","key","text","activities","getOptions","setState","removeItem","state","handleDelete","getItem","acactivities","map","activity","handleRemove","color","content","onClick","handleModify","handleDecrement","weight","handleIncrement","textAlign","handleAddition","handleChange","handleInputChange","handleAntidelete","handleEdit","renderActivities","handleAdd"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Layout from '../../components/Layout';\r\nimport {Grid, Dropdown, Input, Button, Message, Popup} from 'semantic-ui-react';\r\n\r\nlet actSetList = [];\r\n\r\nexport default class CreateList extends Component {\r\n  state={\r\n    actList: '',\r\n    title: '',\r\n    tempName: ''\r\n  };\r\n\r\n  getOptions = () => {\r\n    for (let i in window.localStorage) {\r\n      if (window.localStorage[i]) {\r\n        actSetList.push(JSON.parse(window.localStorage[i]))\r\n      }\r\n    }\r\n  }\r\n\r\n// Adds activity list into local storage\r\n  handleAddition = (e, {value}) => {\r\n    window.localStorage.setItem(value, JSON.stringify({key: value, text: value, value, activities: []}));\r\n    this.getOptions;\r\n  }\r\n\r\n// Changes title display to match current value and keeps track of true title\r\n  handleChange = (e, {value}) => this.setState({actList: value, title: value});\r\n\r\n// Allows changes in input field\r\n  handleInputChange = (e, {value}) => this.setState({actList: value});\r\n\r\n// Deletes the activity list\r\n  handleDelete = () => {\r\n    window.localStorage.removeItem(this.state.title);\r\n    this.setState({actList: '', title: ''})\r\n  };\r\n\r\n// Ensures no accidental deletion\r\n  handleAntidelete = () => {\r\n    if (this.state.actList) {\r\n      return(\r\n        <Button\r\n          negative\r\n          content='Comfirm Delete'\r\n          onClick={this.handleDelete}\r\n        />\r\n      );\r\n    } else {\r\n      return(\r\n        <Message\r\n          negative\r\n          content='You cannot delete nothing!'\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n// Edits the title of the active activity list\r\n  handleEdit = () => {\r\n    if (this.state.title) {\r\n      const activities = JSON.parse(window.localStorage.getItem(this.state.title)).acactivities;\r\n      window.localStorage.removeItem(this.state.title);\r\n      window.localStorage.setItem(value, JSON.stringify({key: this.state.actList, text: this.state.actList, value: this.state.actList, activities}));\r\n      this.setState({title: this.state.actList});\r\n    }\r\n  };\r\n\r\n// Adds an activity to the activity list\r\n  handleAdd = () => {\r\n\r\n  };\r\n\r\n// Removes an activity from the activity list\r\n  handleRemove = () => {\r\n\r\n  };\r\n\r\n// Modifies the name of an activity\r\n  handleModify = () => {\r\n\r\n  };\r\n\r\n// Increments the weight of an activity\r\n  handleIncrement = () => {\r\n\r\n  }\r\n\r\n// Decrements the weight of an activity\r\n  handleDecrement = () => {\r\n\r\n  };\r\n\r\n  renderActivities() {\r\n    if (this.state.title) {\r\n      return (\r\n        JSON.parse(window.localStorage.getItem(this.state.title)).activities.map(activity => {\r\n          return(\r\n            <Grid.Row key={activity.key}>\r\n              <Grid.Column\r\n                width={2}\r\n                textAlign='right'\r\n                verticalAlign='middle'\r\n              >\r\n                <Button\r\n                  circular\r\n                  negative\r\n                  icon='minus'\r\n                  size='medium'\r\n                  onClick={this.handleRemove}\r\n                />\r\n              </Grid.Column>\r\n              <Grid.Column width={9}>\r\n                <Input\r\n                  action={{\r\n                    color: 'blue',\r\n                    content: 'Edit Name',\r\n                    onClick: this.handleModify\r\n                  }}\r\n                  size='small'\r\n                  fluid\r\n                  defaultValue={activity.key}\r\n                />\r\n              </Grid.Column>\r\n              <Grid.Column\r\n                width={2}\r\n                textAlign='right'\r\n                verticalAlign='middle'\r\n              >\r\n                <Button\r\n                  circular\r\n                  negative\r\n                  icon='minus'\r\n                  size='mini'\r\n                  onClick={this.handleDecrement}\r\n                />\r\n              </Grid.Column>\r\n              <Grid.Column\r\n                width={1}\r\n                textAlign='center'\r\n                verticalAlign='middle'\r\n              >\r\n                <h2>{activity.weight}</h2>\r\n              </Grid.Column>\r\n              <Grid.Column\r\n                width={2}\r\n                verticalAlign='middle'\r\n              >\r\n                <Button\r\n                  circular\r\n                  positive\r\n                  icon='plus'\r\n                  size='mini'\r\n                  onClick={this.handleIncrement}\r\n                />\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          );\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    this.getOptions;\r\n    return(\r\n      <Layout>\r\n        <Grid>\r\n          <Grid.Row>\r\n            <Grid.Column width={8}>\r\n              <h2 style={{textAlign: 'right'}}>Saved Activity Sets</h2>\r\n            </Grid.Column>\r\n            <Grid.Column width={5}>\r\n              <Dropdown\r\n                placeholder='Activity Set'\r\n                search\r\n                selection\r\n                options={actSetList}\r\n                allowAdditions\r\n                additionLabel='New Activity Set: '\r\n                onAddItem={this.handleAddition}\r\n                onChange={this.handleChange}\r\n                value={this.state.title}\r\n              />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n          <Grid.Row>\r\n            <Grid.Column textAlign='center'>\r\n              <Popup\r\n                trigger={\r\n                  <Input\r\n                    size='large'\r\n                    placeholder='Title'\r\n                    value={this.state.actList}\r\n                    onChange={this.handleInputChange}\r\n                    action\r\n                  >\r\n                    <Popup\r\n                      trigger={\r\n                        <Button\r\n                          negative\r\n                          icon='minus'\r\n                          size='large'\r\n                        />\r\n                      }\r\n                      content={this.handleAntidelete}\r\n                      on='click'\r\n                      position='top center'\r\n                    />\r\n                    <input />\r\n                    <Button\r\n                      color='blue'\r\n                      content='Edit Title'\r\n                      onClick={this.handleEdit}\r\n                      disabled={!this.state.actList}\r\n                    />\r\n                  </Input>\r\n                }\r\n                content={\r\n                  <Message\r\n                    negative\r\n                    content='You cannot name an activity set nothing!'\r\n                  />\r\n                }\r\n                position='top center'\r\n                disabled={!!this.state.actList}\r\n              />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n          <Grid.Row>\r\n            <Grid.Column width={2}></Grid.Column>\r\n            <Grid.Column\r\n              width={9}\r\n              textAlign='center'\r\n              verticalAlign='bottom'\r\n            >\r\n              <Message\r\n                color='blue'\r\n                header='Activity Name'\r\n                content='Name of your break activity.'\r\n              />\r\n            </Grid.Column>\r\n            <Grid.Column\r\n              width={5}\r\n              textAlign='center'\r\n            >\r\n              <Message\r\n                color='red'\r\n                header='Weight'\r\n                content='How much you want to weight an activity to show up. Each unit is like adding another entry into a lottery.'\r\n              />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n          {this.renderActivities()}\r\n          <Grid.Row>\r\n            <Grid.Column\r\n              width={2}\r\n              textAlign='right'\r\n              verticalAlign='middle'\r\n            >\r\n              <Button\r\n                circular\r\n                positive\r\n                icon='plus'\r\n                size='medium'\r\n                onClick={this.handleAdd}\r\n              />\r\n            </Grid.Column>\r\n            <Grid.Column width={9}>\r\n              <Input\r\n                size='small'\r\n                placeholder='Name'\r\n                fluid\r\n              />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}